「文芸的プログラミング」は、D.クヌース氏が発表したプログラミング手法です。この手法は、プログラミングのソースコードをその理論的背景を説明する文章とともに書くことを奨励するものです。「文芸的」な読みものをつくり上げるように「プログラミング」できるのでこのような手法名になりました。

一般的にプログラミングとは頭の中で理論を構築し、そこからコンピュータの処理内容を考え、それをコードに落とし込む作業だと言えます。しかし頭の中だけで組立てられた理論は、正確さが欠けていたり最適でなかったりすることがあります。「文芸的プログラミング」では、できるだけ細かい断片ごとにコードと説明文をセットで書くことで、貧弱な理論のもとで書かれようとしているコードを自動的にあぶり出すという効果があります。また、コードを作成する人にとって説明文を書く行為はコードについて深く考えることに相当するので、考えながら書くという姿勢を習慣づけることができるよい環境とも言えます。

クヌース氏は方法論とともに「文芸的プログラミング」を支援するシステムも発表しています。このシステムでは、主に2つの機能を提供します。1つは、上記で説明したような、コードと説明文が共存する文書を作成可能にする環境の提供です。もう1つは、この文書からコードだけを抜き出し、コンピュータ上で実行可能なファイルを別途作成する機能です。「文芸的プログラミング」を支援するツールはクヌース氏の発表したもののほかにもいくつか存在します。そのうちの1つがOrg Modeです。Org Modeではコードブロックという、コードを収めるための記述様式があります。これはOrg記法の文書中のどこにでも、何個でも配置できます。この特性を利用してコードと説明文が寄り添う文書を作成できます。またコードブロック内のコードだけを集約して吐き出すことができ、この結果がコンピュータで実行可能なファイルとなります。

さて、Org Modeのコードブロックに記述可能なのはプログラミングのコードだけではなく、日本語で書かれた文章も入れられます。この性質を利用すると、例えばコードブロック内に文章を置き、その文章の作成に役立つ情報を周辺に共存させることができます。これは「文芸的プログラミング」の手法を本や論文の原稿執筆に応用できることを意味します。原稿の素材となるメモや執筆に必要な周辺情報を揃えながら、原稿をつくり上げていくスタイルが可能なのです。

実はみなさんが今読んでいるこの原稿は、この応用手法によってつくり上げられ、Org Modeの機能によって単独ファイルとして書き出されたものです。全体の文書は以下のURLから参照できます。実践例の一つとしてご覧ください。

https://github.com/p-snow/publications/blob/main/sources/toolbox-for-lifehacking.org

以下では、上記文書の中でどのような情報を揃えながら原稿を書いたのかを、その効能を考察しながら説明してみます。

1つ目は、書籍全体の説明や私が執筆するまでの経緯などのバックグラウンド情報です。年刊誌である本書へは毎年アップデートした内容を寄稿するのですが、基本事項を再確認して1年ぶりの執筆をスムーズに再スタートさせるのに役立ちます。

2つ目は、自動原稿チェックのためのルールとチェック結果です。本書で要求される表現方針と普段の自分の言葉遣いとのミスマッチを予め洗い出しておき、ルール違反を即座に検知できる仕組みをつくります。特に締切間際の慌しい状況で見落しがちな初歩的な問題の発見・修正に役立ちます。

3つ目は、原稿の各パラグラフにつける小見出しです。この小見出しは原稿に載せるものではありませんが、小見出しがあることにより原稿の方向性がぶれることなく書き進められるというメリットがあります。

4つ目は、参考にした情報源へのリンクです。原稿内での取り上げ方の再確認などをハイスピードで実施できます。

5つ目は、とりあえず書いた原稿に対して思い浮かんだツッコミです。ツッコミから重要な気づきを得られることもありますが、今は書き進めたいという段階では足枷になり得ます。これをとりあえず保存することで心安らかに筆を進めることができます。

(メモから原稿への昇華の話も書いておこう)

以上は私の実践ですが、工夫次第でいろいろな執筆手法を実装できる枠組みであることがこの仕組みのよいところです。みなさんも自分で描いた執筆方法を具現化する場として活用してみてはいかがでしょうか。
