「文芸的プログラミング」はD.クヌース氏が発表したプログラミング手法です。
この手法は、プログラミングのソースコードをその理論的背景を説明する文章とともに書くことを奨励するものです。
結果として「文芸的」な読みものをつくり上げるように「プログラミング」できるのでこのような手法名になりました。
一般的にプログラミングとは頭の中で理論を構築し、そこからコンピュータの処理内容を考え、それをコードに落とし込む作業だと言えます。
しかし頭の中だけで組立てられた理論は、正確さが欠けていたり最適でなかったりすることがあります。
「文芸的プログラミング」では、できるだけ細かい断片ごとにコードと説明文をセットで書くことで、貧弱な理論のもとで書かれようとしているコードを自動的にあぶり出すという効果があります。
またコードを作成する人にとって説明文を書く行為はコードについて深く考えることに相当するので、考えながら書くという姿勢を習慣づけることができます。

クヌース氏は方法論とともに「文芸的プログラミング」を支援するシステムも発表しています。
このシステムでは、主に2つの機能を提供します。
1つは、上記で説明したような、コードと説明文が共存する文書を作成可能にする環境の提供です。
もう1つは、この文書からコードだけを抜き出し、コンピュータ上で実行可能な別ファイルを作成する機能です。
「文芸的プログラミング」を支援するツールはクヌース氏の発表したもののほかにもいくつか存在します。
そのうちの1つがOrg Modeです。
Org Modeではコードブロックという、コードを収めるための記述様式があります。
これはOrg記法の文書中のどこにでも、何個でも配置できます。
この特性を利用してコードと説明文が寄り添う文書を作成できます。
またコードブロック内のコードだけを集約して吐き出すことができ、この結果がコンピュータで実行可能なファイルとなります。

Org Modeのコードブロックに記述可能なのは、プログラミングのコードだけではなく、日本語で書かれた文章も入れられます。
この性質を利用すると、例えば、コードブロック内に文章を置き、その文章の作成に役立つ情報を周辺に共存させることができます。
これは「文芸的プログラミング」の手法を本や論文の原稿執筆に応用できることを意味します。
原稿の素材となるメモや執筆に必要な周辺情報を揃えながら、原稿をつくり上げていくスタイルが可能なのです。

実はみなさんが今読んでいるこの原稿は、この応用手法によってつくり上げられ、Org Modeの機能によって単独ファイルとして書き出されたものです。
全体の文書は以下のURLで参照できます。実践例の一つとしてご覧ください。

https://github.com/p-snow/publications/blob/main/sources/toolbox-for-lifehacking.org

ここでは、上記文書の中で、どのような情報を揃えながら原稿を書いたのかを、原稿にもたらした効能と合わせて説明してみたいと思います。

1.文書のはじめでは、本書全体のプロジェクトの説明と私が執筆するまでの簡単な経緯などを書いています。
年刊誌である本書へは毎年アップデートした内容を寄稿するのですが1年ぶりのとりかかりの際の基本事項確認に役立ちます。
2.原稿の締切と文体・文字数の制限、および現在の原稿文字数を表します。
これは原稿の内容に集中している時でも、本情報を見ることで力の入れ具合などを調節するときに役立ちます。
3.構文チェック結果を表示します。
締切間際の慌しし状況で見落しがちな構文上の基本的なエラーを発見し修正するのに役立ちます。
4.パラグラフ毎に小見出しをつけています。
この小見出しは原稿に記載されるものではありませんが、つけることによって文章が方向性を見失わないというメリットがあります。
5.原稿執筆に参考にした情報源へのリンクを記入します。
原稿内容の妥当性をすばやく確認し問題があれば修正する、という一連の動作のスピードを速めます。
6.原稿に対する想定できる疑問や反論を書きます。
疑問はとりあえず脇に置き、とにかく筆を前に進める効果があります。また、原稿を読み返すごとに浮上する不安感の堂々巡りを防ぐことができます。

これはあくまで私の応用方法ですが、工夫次第でいろいろなことができます。
例えば、断片的な原稿アイデアをまずメモとして書き連ね、ある程度思索がまとまったらそれをもとに本番の原稿を組み上げていくという執筆スタイルなどが考えられます。
