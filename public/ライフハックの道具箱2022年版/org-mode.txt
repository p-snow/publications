Org Modeの説明の前にテキストエディタEmacsとModeの話をしましょう。
EmacsにはModeという概念があります。
Modeとは、特定のコンピュータ言語のために最適化された表示方法や編集コマンドを提供する内部状態のことです。
Emacsはファイルを開くとき、ファイルに書かれた言語を自動的に判別して適切なModeへの切り替えをします。
プレーンテキストファイルを開けばText Modeに、JSONファイルを開けばJson Modeに、Pythonのソースコードを開けばPython Modeに切り替わる、といった具合です。
そしてMarkdownに似た、構造化された文章を表現するための独自記法ファイルを開いたときに有効になるのがOrg Modeです。
この独自記法を本書ではOrg記法と呼びます。
Org記法では、アウトラインをはじめハイパーリンク・表・TODOなどの表現ができます。
Org Modeは、この多様な文書表現を活かして実に多くの機能をユーザに提供します。
つまりOrg Modeとは、Emacsを多機能アウトライナーとして使用する場合の名称だとご理解ください。

アウトライナーとしてのOrg Modeの特筆すべき点は、Emacsの得意とするキーボード操作でアウトライン項目の折り畳み・移動・ズーム・検索などが自在に素早く行えることでしょう。主要なキーボードショートカットを覚えれば、アウトライン操作と文章作成がキーボードという軸でシームレスにつながり、両手をキーボードのホームポジションから移動させることなく、編集対象に最大限の注意を向けながら作業できます。

Org Modeはファイルベースで情報を管理するので、個人での情報利活用に向いています。
中でもタスク管理・ナレッジベース構築・アイデア整理・文章作成・プログラミング開発支援の分野で利用されているのが多い印象です。

ここではタスク管理に関連するOrg Modeの代表的な機能をいくつか紹介します。
Org Agendaは、タスク管理を実現する機能です。アウトライナーの一項目でタスクを表現し、実施日時や優先度などの付加データを設定することで適切なタイミングで実行すべきタスクを検索できる機能を提供します。
Org Captureは、メモすばやく取るための機能です。
Org Clockは、タスクの実行記録をとるための機能です。

これらの機能を使って実際にどんなことができるのか具体例をご紹介しましょう。
とあるプロジェクトで新たなタスクが発生し、この実施を引き受けたと仮定します。
まずは、アウトライン上にタスクをつくります。
すでにプロジェクト用の項目があるとするとその一階層下に新たに項目を作成しタイトルをつけ、タイトルの前にTODOと入力します。ここでタスクの締切を入力します。
タスクの締切が数日後に迫ると、Org Agendaはそのことを通知してくれます。そこでタスクにとりかかります。
Org Clockを使ってタスクの開始を宣言します。
タスク実行中に収集した情報やアイデアはメモとしてOrg Captureの機能を使って保存します。これらの情報はタスク項目の場所に自動的に集約されます。

このワークフローで、タスクの実施の通知、タスクベースでのメモや情報の集約、タスク実行時間の集計、ができてしまいました。

このように複数の機能を組合わせて利用してワークフローを組み上げることで、結果的に大きな効果を得られるのが特徴です。このときEmacs上で実施していることでこの組み上げがよりスムーズになることも忘れてはいけません。

専用のタスク管理アプリの御株を奪うと言えるでしょう。

最後にOrg記法についてふれておきましょう。
共通的な仕様が標準化されているMarkdownとは異なり、Org記法はOrg Modeとともに発展してきました。
つまり、Org Modeでの実装が事実上のOrg記法の標準となっています。
想像に難くありませんが、Org記法はEmacsおよびOrg Modeの都合を色濃く反映したものになりました。
その結果、Org記法エディタとしてのOrg Modeは洗練され、関連機能は非常に充実しています。
一方で他のエディタでのOrg記法の編集や、Org Mode自体の外部移植には今のところ輝かしい成功の例を見ません。
ここで、決してOrg記法の認知度が極端に低いわけではないことは付言させてください。
実際、GithubなどではOrg記法で書かれた文書がサポートされブラウザ上できれいに表示してくれます。
このように、ファイル形式とエディタとが密な関係にあるという事情なども考慮に入れてツール選びをしていただくと、より満足度の高い結果が得られるのではないかと思います。
