「文芸的プログラミング」は、D.クヌース氏が提案したプログラミング方法論です。ソースコードを書くとき、その理論的背景を説明する文章も同時に書くことを奨励するものです。「文芸的」な読みものをつくり上げるように「プログラミング」できるのでこのような名前になりました。

一般的にプログラミングとは頭の中で理論を構築し、そこからコンピュータの処理内容を考え、それをコードに落とし込む作業だと言えます。しかし頭の中だけで組立てられた理論は、正確さが欠けていたり最適でなかったりすることがあります。「文芸的プログラミング」では、できるだけ細かい断片ごとにコードと説明文をセットで書くことで、貧弱な理論のもとで書かれようとしているコードを自動的にあぶり出すという効果があります。また、コードを作成する人にとって説明文を書く行為はコードについて深く考えることに相当するので、考えながら書くという姿勢を習慣づけることができるよい環境とも言えます。

クヌース氏は方法論とともに「文芸的プログラミング」を支援するシステムも発表しています。このシステムでは、主に2つの機能を提供します。1つは、上記で説明したような、コードと説明文が共存する文書を作成可能にする環境の提供です。もう1つは、この文書からコードだけを抜き出し、パソコン上で実行可能なファイルを別途作成する機能です。

「文芸的プログラミング」を支援するツールはクヌース氏の発表したもののほかにもいくつか存在します。そのうちの1つがOrg Modeです。Org Modeではコードブロックという、コードを収めるための記述様式があります。これはOrg記法の文書中のどこにでも何個でも配置できます。この特性を利用してコードと説明文が寄り添う文書を作成できます。またコードブロック内のコードだけを集約して吐き出すことができ、この結果がパソコンで実行可能なファイルとなります。

さて、Org Modeのコードブロックに記述可能なのはプログラミングのコードだけではありません。日本語で書かれた一般的な文章も入れられるのです。この性質を利用すると、例えばコードブロック内に文章を置き、その文章の作成に役立つ情報を周辺に共存させることができます。これは、「文芸的プログラミング」の手法を本や論文の原稿執筆に応用できることを意味します。原稿の素材となるメモや執筆に必要な周辺情報を揃えながら、原稿をつくり上げていくスタイルが可能なのです。

実はみなさんが今読んでいるこの原稿は、この応用手法によってつくり上げられ、Org Modeの機能によって単独ファイルとして書き出されたものです。全体の文書は以下のURLから参照できます。

https://github.com/p-snow/publications/blob/main/sources/toolbox-for-lifehacking.org

ここでは、Org Modeのアウトライナー機能を利用して、原稿の一段落がひとつの項目に対応するように配置しています。すべての項目に見出しをつけることで文章全体の構成を俯瞰しやすくするとともに、説明順序の入替えや原稿の構造的な見直しを容易にしています。

以下では、本手法で原稿を書き上げるときにどのような情報を揃えて活かしたのかを、その効能を考察しながら説明していきます。

1つ目は、執筆行為に関連する情報です。締切日や文字数制限、文体の制約などの遵守する必要がある情報は近くに置き確認する手間が少なければ少ないほどよいでしょう。本書は年刊誌で1年ごとに執筆する機会があるので、昨年までの執筆時に残した情報をもとに、
前の版までの内容と整合性をもたせる内容を書くや、
今年の作業時間を見積もったりすることができます。

2つ目は、参考情報です。

情報源がウェブページや本の場合は情報源に繋がるリンクを張り、特にポイントとなる箇所の抜粋を入れます。AIとのインタラクションは、質問を見出しに置きAIの回答を中身に入れ"AI"というタグをつけます。

私自身、AIの利用方法は試行錯誤中ですが、AIの回答を情報源として利用する場合は、そのときの質問と回答を残しておくのがよいと感じています。

3つ目は、原稿の自動チェックの結果です。

本書で要求される表現方針と普段の自分の言葉遣いとのミスマッチを予め洗い出しておき、ルール違反を即座に検知できる仕組みをつくります。「てにをは」や

本書は数名の著者が記事を持ちよるかたちの年刊誌です。

他の方の文言に合わせられる

以上は私の実践ですが、工夫次第でいろいろな執筆手法を実装できる枠組みであることがこの仕組みのよいところです。みなさんも自分で描いた執筆方法を具現化する場としてこのような仕組みを取り入れてみてはいかがでしょうか。
