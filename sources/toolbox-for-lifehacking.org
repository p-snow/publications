#+TITLE: ライフハックの道具箱
#+PROPERTY: header-args       :mkdirp yes
#+OPTIONS: \n:t

書籍『ライフハックの道具箱 2022年版』に投稿する文章

* 『ライフハックの道具箱』プロジェクトとは

『ライフハックの道具箱』は倉下忠憲([[https://twitter.com/rashita2][@rashita2]])さんが編集する、ライフハックに関連するツールを紹介する書籍。
年刊誌の側面もあり、毎年年末にその年に話題となったツール情報を前年版に入れ込んでアップデートされた内容を「20xx年版」と銘打ってkindle形式で販売している。
初版となる2020年版は倉下さんが自身で執筆し、次版の2021年版では数名のツール利用者がそれぞれ自身の愛用するツールについての紹介文を寄稿した。私はこの2021年版で[[https://twitter.com/rashita2/status/1455052352340127744][手を挙げて]]テキストエディタ「Emacs」とアウトライナー「Org-mode」の記事を投稿した。

- 2020年版
  - [[https://www.amazon.co.jp/%E3%83%A9%E3%82%A4%E3%83%95%E3%83%8F%E3%83%83%E3%82%AF%E3%81%AE%E9%81%93%E5%85%B7%E7%AE%B1-2020%E5%B9%B4%E7%89%88-%E5%80%89%E4%B8%8B%E5%BF%A0%E6%86%B2-ebook/dp/B08RRQ4ZXS][Amazon.co.jp: ライフハックの道具箱 2020年版 eBook : 倉下忠憲: 本]]
- 2021年版
  + [[https://www.amazon.co.jp/%E3%83%A9%E3%82%A4%E3%83%95%E3%83%8F%E3%83%83%E3%82%AF%E3%81%AE%E9%81%93%E5%85%B7%E7%AE%B1-2021%E5%B9%B4%E7%89%88-%E5%80%89%E4%B8%8B%E5%BF%A0%E6%86%B2-ebook/dp/B09P1LHDPY][ライフハックの道具箱 2021年版 | 倉下忠憲, PADAone, ゆうびんや, こなゆき, Tak., 大橋悦夫 | 実践経営・リーダーシップ | Kindleストア | Amazon]]
  + [[https://rashita.net/blog/?p=30836][『ライフハックの道具箱 2021年版』プロジェクト始動 | R-style]]
  + [[https://rashita.net/blog/?tag=%E3%80%8E%E3%83%A9%E3%82%A4%E3%83%95%E3%83%8F%E3%83%83%E3%82%AF%E3%81%AE%E9%81%93%E5%85%B7%E7%AE%B1-2021%E5%B9%B4%E7%89%88%E3%80%8F][『ライフハックの道具箱 2021年版』 | R-style]]
  + [[https://note.com/rashita/n/n227a80a2446d][『ライフハックの道具箱』について/セッション・ライティング/定期連絡の効用｜倉下忠憲｜note]]
    ■先へ先への誘惑
    #+begin_quote
      「ライフハック」は、いわゆるアーリーアダプターが多く、新しいツールに興味関心を持ち、その情報を多くの人に共有する姿勢を持っています。素晴らしい姿勢です。しかし、彼らのそうした性質は、「通り過ぎてしまったもの」の扱いを軽くしてしまいます。

      新機能が発表されないツールは見向きもされず、日常に溶け込んでしまって何を工夫しているのかも自分では忘れてしまっている話題はわざわざ記事に起こすことをしないのです。

      結果、最新の更新ばかりが目に入るタイムラインでは、「新しいツールの新しい機能」のことばかりが目に留まります。反面、長く使っていてほぼ安定軌道に入っているツールの話題はすっかり抜け落ちるのです。これはいびつでしょう。

      ...

      新しい情報を追い求めるライフハッカーは、そうした定番情報を抜け落としてきたと言えるでしょうし、Googleの「新しい情報ほど評価する」姿勢にすっかり飼いならされてしまったと言えるかもしれません。
    #+end_quote
- 2022年版
  + [[https://rashita.net/blog/?p=31179][『ライフハックの道具箱 2022年版』プロジェクト始動 | R-style]]

* 原稿提出までの手順
:PROPERTIES:
:CREATED:  [2022-11-18 Fri 09:46]
:END:

1. このファイルの中で「文芸的執筆」スタイルで原稿を執筆
   - 各ステータス(現在の文字数、など)はC-x C-v bでアップデートされる
2. コマンド'make tangle'で提出稿の書き出し
   - Emacs内で作業していれば[[file:~/ghq/github.com/p-snow/publications/tangle.el][ファイルセーブするタイミングで上記コマンドが自動実行される仕組み]]になってる
3. 倉下さんに提出用ファイルの場所を伝える

   提出用ファイルの保存フォルダ
   #+name: lhack-toolbox-dir
   #+begin_src emacs-lisp :tangle no :noweb yes :exports results
     (file-relative-name
      (expand-file-name "../public/ライフハックの道具箱2022年版" ".")
      default-directory)
   #+end_src

   #+RESULTS: lhack-toolbox-dir
   : ../public/ライフハックの道具箱2022年版

* 原稿
:PROPERTIES:
:CREATED:  [2022-11-12 Sat 12:22]
:header-args+: :tangle-mode (identity #o644)
:ID:       1dea9175-0709-4de5-af01-5eb2dfc5a70c
:END:

- 担当セクション

  書籍中で自分が担当する節は以下
  - [X] [[* Emacs][Emacs]]
  - [X] [[* Org-mode][Org-mode]]
  注意点
  - [X] それぞれの節は独立して離れた箇所に配置されるので、節同士で内容が依存するようであってはダメ

- 原稿のレギュレーション
  [[https://rashita.net/blog/?p=31179][プロジェクト始動宣言ページ]]の最後の方に記載あり
  + [X] 文字数: (各節)2,000字前後
  + [X] 文体:「です、ます」
  + [ ] 締め切り: 2022年11月いっぱい

- 想定読者 (個人的な判断)
  日本のいわゆる「ライフハック」クラスタ、またこの分野に興味のある層
  + PC利用スキルは標準
    → 極力、平易な言葉を使用
  + Emacs利用シナリオでライフハック界隈で使われる文脈に乗っかれるところがあれば採用を検討

- 自動原稿チェックの設定
  #+begin_src json :tangle ../config/lhack-tbox.textlintrc :eval no :exports none
    {
      "rules": {
        "preset-ja-technical-writing": {
          "no-exclamation-question-mark": false,
          "sentence-length": {
            "max": 200
          }
        },
        "spellcheck-tech-word": true,
        "textlint-rule-write-good": true,
        "preset-ja-spacing": true,
        "prh": {
          "rulePaths": [
            "./lhack-tbox.yml"
          ]
        }
      }
    }
  #+end_src

- 書籍中で統一する文言 :: 表記ゆれチェック

  統一する文言ルールをチェッカーの設定ファイル形式で記述していく
  #+begin_src yaml :tangle ../config/lhack-tbox.yml :eval no
    version: 1

    rules:
      - expected: 安定版
        pattern:  安定板 # 2021年版本番稿の誤植、迷惑かけた

      - expected: Org-mode
        patterns:
          - /org-mode/
          - /Org-Mode/
          - orgmode

      # 本書では「パソコン」で統一
      # tech-word からのリンティング指摘は無視
      - expected: パソコン
        patterns:
          - PC
          - コンピュータ
          - コンピューター

      # 本書では「MacOS」で統一
      - expected: MacOS
        patterns:
          - macOS
          - Mac OS

      # Emacs用語は使わない
      - expected: キーボードショートカット
        patterns:
          - キーバインド
          - キーバインディング

      - expected: カット
        patterns:
          - キル
          - kill

      - expected: ペースト
        patterns:
          - ヤンク
          - yank

      # アウトライナー系用語の統一
      - expected: ズーム
        patterns:
          - zoom
          - ナロー
          - narrow
          - フォーカス
  #+end_src

** Emacs
:PROPERTIES:
:CREATED:  [2022-11-09 Wed 16:45]
:header-args+: :tangle "../public/ライフハックの道具箱2022年版/emacs.txt"
:ID:       8754255c-d0e2-4b90-98d5-a3ea009c3db2
:END:

Emacsセクションのアウトプットファイル (提出用)
#+name: output-emacs
#+begin_src emacs-lisp :tangle no :noweb yes :exports results
  (file-relative-name
   (file-name-concat "<<lhack-toolbox-dir()>>" "emacs.txt")
   default-directory)
#+end_src

#+RESULTS: output-emacs
: ../public/ライフハックの道具箱2022年版/emacs.txt

現在の文字数 (目安: 2,000文字前後)
#+begin_src shell :tangle no :noweb yes :exports results
  echo -n $(cat <<output-emacs()>> | wc -m) '文字'
#+end_src

#+RESULTS:
: 2062 文字

自動原稿チェック結果
#+begin_src shell :tangle no :noweb yes :results output :exports results
  cat "<<output-emacs()>>" | textlint --stdin --config ../config/lhack-tbox.textlintrc | cat -
#+end_src

#+RESULTS:
#+begin_example

<text>
   1:8    ✓ error  パソコン => PC                                                                                                  spellcheck-tech-word
   1:37   ✓ error  MacOS => Mac OS                                                                                                 spellcheck-tech-word
   3:70   error    文末が"。"で終わっていません。                                                                                  ja-technical-writing/ja-no-mixed-period
   4:15   ✓ error  Mac OS => MacOS                                                                                                 prh
   8:67   ✓ error  Webブラウザ => ブラウザ                                                                                         spellcheck-tech-word
   8:78   ✓ error  リーダな => リーダーな                                                                                          spellcheck-tech-word
   8:289  ✓ error  一つ => 1つ
数量を表現し、数を数えられるものは算用数字を使用します。任意の数に置き換えても通用する語句がこれに該当します。  ja-technical-writing/arabic-kanji-numbers
  10:112  error    一つの文で"、"を4つ以上使用しています                                                                           ja-technical-writing/max-ten
  14:56   error    【dict5】 "開発を行う"は冗長な表現です。"開発する"など簡潔な表現にすると文章が明瞭になります。
解説: https://github.com/textlint-ja/textlint-rule-ja-no-redundant-expression#dict5                  ja-technical-writing/ja-no-redundant-expression
  16:157  error    一文に二回以上利用されている助詞 "に" がみつかりました。                                                        ja-technical-writing/no-doubled-joshi
  16:187  error    一文に二回以上利用されている助詞 "が" がみつかりました。                                                        ja-technical-writing/no-doubled-joshi
  18:48   error    【dict2】 "することのできるツール"は冗長な表現です。"することの"を省き簡潔な表現にすると文章が明瞭になります。
解説: https://github.com/textlint-ja/textlint-rule-ja-no-redundant-expression#dict2  ja-technical-writing/ja-no-redundant-expression

✖ 12 problems (12 errors, 0 warnings)
✓ 6 fixable problems.
Try to run: $ textlint --fix [file]

#+end_example

*** イントロ・入手方法
:PROPERTIES:
:CREATED:  [2022-11-12 Sat 14:36]
:END:

#+begin_src text :eval no
  Emacsは、パソコン上で動作するテキストエディタです。Windows・MacOS・Linux版のアプリケーションのインストール方法が公式サイトに記載されていていずれも無料で利用できます。WindowsまたはMacOSをお使いで実行可能なアプリファイルを手軽に入手されたい方は以下のサイトをご覧ください。

  Windows版Emacsのダウンロードページ: http://ftp.jaist.ac.jp/pub/GNU/emacs/windows/
  GNU Emacs For Mac OS X: https://emacsformacosx.com/
#+end_src

- Emacsのインストール方法を整理
  1. [X] Executableを公式サイトから入手
     - 公式サイト: [[https://www.gnu.org/software/emacs/][GNU Emacs - GNU Project]]
       + [[http://ftp.jaist.ac.jp/pub/GNU/emacs/windows/][Windows版 Emacsのダウンロードページ]]
       + [[https://emacsformacosx.com/][GNU Emacs For Mac OS X]]
  2. [ ] 利用OSのGUIアプリマネージャを利用
     - 個別利用環境に依存した内容は書かない方がよい
  3. [ ] OSプリインストール版の言及
     - 旧バージョンの利用を促す危険性があるのでNG
     - 近年のMacにはemacsがプリインストールされているのだろうか？
  4. [ ] 利用環境のコマンドラインパッケージマネージャを利用(e.g. brew apt)
     - 本書の想定読者のニーズと不一致
  5. [ ] ソースコードをビルド
     - 本書コンセプトのスコープ外

*** キーボードで完結するエディタ
:PROPERTIES:
:CREATED:  [2022-11-17 Thu 18:02]
:END:

#+begin_src text :eval no
  プログラムコードの作成から文章執筆まで、テキストデータを扱う作業であれば対応できないものはないと言っても過言ではないほど柔軟性の高いエディタです。キーボードのためのエディタという側面もあり、 テキスト入力にとどまらず文字列の移動・検索、ファイルの複製・削除などEmacsで提供されているあらゆる機能をキーボードだけで実行できます。数多く用意されているキーボードショートカットを駆使すれば、キーボード操作だけで完結する極めて快適な編集作業がおこなえます。
#+end_src

本書の特徴からEmacsに対して一般的に持ち出される以下のような文脈・視点は排除する
- プログラミング言語編集のための「コードエディタ」としてVS CodeやVimなどとの対比 ([[https://ja.wikipedia.org/wiki/%E3%82%A8%E3%83%87%E3%82%A3%E3%82%BF%E6%88%A6%E4%BA%89#bodyContent][Editor War]])

*** EmacsのOS性
:PROPERTIES:
:CREATED:  [2022-11-17 Thu 18:02]
:END:

#+begin_src text :eval no
  一般的なテキストエディタと比べてEmacsが際立っている点は、テキスト編集以外の機能も充実していることでしょう。その一例を挙げると、Webブラウザ・RSSリーダなどの情報をインプットするための機能、メール・チャット・SNSなどのコミュニケーションのための機能、ファイラー・バージョン管理などアウトプットを管理するための機能、などがあります。通常のテキストエディタがコードや文章を生み出す「アウトプットの場」であるのに対して、Emacsはこのように広い範囲の機能を提供することで「総合的な生産活動の場」として成立します。インプットからアウトプットまでのプロセスをEmacsという一つのツールで完結できるので、データの移動や加工、検索などがすべて同じ作法でスムーズにおこなえるのが魅力です。
#+end_src

- [[https://github.com/hayamiz/twittering-mode][twittering-mode]]は利用者の少なさや、コードメンテがあまりされてない状況で書くのは適切か？
  - → 買収からの流れで [[https://codeberg.org/martianh/mastodon.el][mastodon.el]] がにわかに盛り上がってる
  - 本記事では「SNS」とまるめて表記することにした

*** 高いカスタマイズ性
:PROPERTIES:
:CREATED:  [2022-11-17 Thu 18:06]
:END:

#+begin_src text :eval no
  さらにEmacsには、ユーザの好みに合わせて自由にカスタマイズできるという特性があります。カスタマイズできる項目は、各部の色やフォントなどUIの基本的な要素から、キーボードショートカット、各機能の動作を決定する調整値などで、実に幅広くまたその数は膨大です。そのうえEmacs Lispというプログミング言語を使えば、Emacsが提供するさまざまな機能を自在に組み合わせて使うことができ、自分の生産活動に特化した至福の環境をつくることができます。
#+end_src

*** 学習コスト
:PROPERTIES:
:CREATED:  [2022-11-17 Thu 18:07]
:END:

#+begin_src text :eval no
  Emacsを快適に使えるようになるためには、その特異なキー操作に慣れたり、設定言語であるEmacs Lispをある程度は理解して書けるようになることが望ましいでしょう。使い方を学んでいく上では、Emacs内蔵の充実したマニュアルが役に立ちます。また世界中の多数のユーザから、掲示板・動画・SNS・メーリングリストなどのメディアを通してノウハウを手に入れることもできます。さらに近年では、あらかじめ特定の目的のための設定が施されたSpacemacsなどのスターターキットが登場し、初期ユーザの学習コストを抑えてEmacsを利用開始できる方法として注目を集めています。
#+end_src

preconfigured emacsの呼び方[[https://www.emacswiki.org/emacs/StarterKits][EmacsWiki]]に倣ってスターターキット
- starter kit
- emacs distribution

*** オープンソース
:PROPERTIES:
:CREATED:  [2022-11-12 Sat 14:37]
:END:

#+begin_src text :eval no
  Emacsは長い間オープンソースソフトウェア(OSS)として開発されてきました。オープンソースとは、主に有志が開発を行い、ソースコードはネット上で公開され、誰でも自由に利用できるソフトウェアを生み出す体制のことです。この意味で企業が主体となって開発する製品ソフトウェアとは異なる性質をもちます。製品ソフトウェアは、企業の経営判断によって開発が終了するといった事態が起こりえますが、OSSではそのようなことはありません。もちろんOSSであっても、開発者や利用者が離れていくことによりプロジェクトが衰退や消滅するケースはあります。しかしEmacsには、長年にわたって育まれた層の厚いコミュニティがあり、現在でも活発に活動していることから、数年のうちに消滅するといった心配は無用でしょう。
#+end_src

このパラグラフでは話をオープンソースまでに止めること
OSSの話の延長にはFLOSSの話があり、GNU Emacsの始祖であるストールマンがFree Softwareムーブメントの先導的役割を果たしたことから、この話題を取り上げたくはなるがこの書籍のスコープではない。

*** 2022年のEmacsの話題
:PROPERTIES:
:CREATED:  [2022-11-19 Sat 15:03]
:END:

#+begin_src text :eval no
  今年、2022年の4月にはEmacsのバージョン28.1がリリースされました。このバージョンではさまざま機能の追加や不具合修正が施されています。中でも最も注目すべきポイントはEmacsの処理速度が格段に速くなるための仕組みが導入されたことでしょう。ただし、この機能を有効にするためにはアプリ作成時に決められた作法に則る必要があり、28.1であっても本機能が利用できない場合があることにはご注意ください。詳しくは「GccEmacs」というキーワードとご利用のOS名を組合せて検索してみてください。
#+end_src

- 2022年のEmacsトピックは何と言ってもnative comp(GccEmacs)機能が搭載された28.1が出たことだが本書でどう書くかが課題
  - [[https://www.masteringemacs.org/article/whats-new-in-emacs-28-1][What's New in Emacs 28.1? - Mastering Emacs]]
  - 配布しているバイナリはnative compがオンになっているのか？

*** アウトロ・総括
:PROPERTIES:
:CREATED:  [2022-11-12 Sat 14:38]
:END:

#+begin_src text :eval no
  Emacsは使い方を学習する必要でありながらも、使えるようになれば自分のこだわりを徹底的に反映することのできるツールです。自分のための生産活動の場をじっくりつくりあげることに興味のある方にはおすすめします。
#+end_src

この記事を読んで「じゃEmacsを使ってみるか」なユーザに次の導入ステップを示せているか？

** Org-mode
:PROPERTIES:
:ID:       f2ac8a38-bc45-4566-8b50-262cc0c5ac07
:header-args+: :tangle "../public/ライフハックの道具箱2022年版/org-mode.txt"
:END:

Org-modeセクションのアウトプットファイル (提出用)
#+name: output-org
#+begin_src emacs-lisp :tangle no :noweb yes :exports results
  (file-relative-name
   (file-name-concat "<<lhack-toolbox-dir()>>" "org-mode.txt")
   default-directory)
#+end_src

#+RESULTS: output-org
: ../public/ライフハックの道具箱2022年版/org-mode.txt

現在の文字数 (目安: 2,000文字前後)
#+begin_src shell :tangle no :noweb yes :exports results
  echo -n $(cat <<output-org()>> | wc -m) '文字'
#+end_src

#+RESULTS:
: 632 文字

自動原稿チェック結果
#+begin_src shell :tangle no :noweb yes :results output :exports results
  cat "<<output-org()>>" | textlint --stdin --config ../config/lhack-tbox.textlintrc | cat -
#+end_src

#+RESULTS:
#+begin_example

<text>
  5:3    ✓ error  一つ => 1つ
数量を表現し、数を数えられるものは算用数字を使用します。任意の数に置き換えても通用する語句がこれに該当します。  ja-technical-writing/arabic-kanji-numbers
  5:221  ✓ error  安定板 => 安定版                                                                                                prh

✖ 2 problems (2 errors, 0 warnings)
✓ 2 fixable problems.
Try to run: $ textlint --fix [file]

#+end_example

*** アウトライナーとしてのOrg
:PROPERTIES:
:CREATED:  [2022-11-09 Wed 16:45]
:header-args+: :tangle "../public/ライフハックの道具箱2022年版/org-mode.txt"
:END:

#+begin_src text :eval no
  Org-modeは、テキストエディタEmacsの中で利用できる多機能アウトライナーです。

  アウトライナーとしてのOrg-modeの特筆すべき点は、Emacsの得意とするキーボード操作でアウトライン項目の折り畳み・移動・ズーム・検索などが自在に素早く行えることでしょう。主要なキーボードショートカットを覚えれば、アウトライン操作と文章作成がキーボードという軸でシームレスにつながり、両手をキーボードのホームポジションから移動させることなく、編集対象に最大限の注意を向けながら作業できます。
#+end_src

「Org-modeは高機能・多機能である」はOrgを知る多くの人の認識(だと思う)だが、１つひとつの機能をリストアップしていけばわかるように、「これはOrgにしかない!」という機能は実はない。
それよりも以下のように「組合せによる相乗効果」が真の意味での利点だと思う
- Emacsの機能を行かした統一的な操作で情報を操作できる

*** 機能の紹介
:PROPERTIES:
:CREATED:  [2022-11-16 Wed 18:35]
:END:

#+begin_src text :eval no
  もう一つ、Org-modeの特長として挙げられるのが、Emacsの拡張性の高さを活かして生み出された多くの機能を無料で利用できる点です。そのすべてを挙げると際限がないほどですが、一例としては、プロジェクト管理・タスクの実行時間の計測・表計算・メモの簡単な取り込み・いろいろな情報源へのリンク・HTMLなどへのエクスポートと言ったものがあります。さらに2021年には、Roam Researchにヒントを得たOrg-roamというパッケージの安定板がリリースされ、本書で言うネットワークファーミングツールとしての機能も備えるようになりました。これらのOrg-modeが提供する豊富な機能とEmacsが持つカスタマイズ性の高さを組み合わせて、日常生活や仕事における知識・タスク・資料などのさまざまな情報を管理・活用する環境をつくることがOrg-modeを使う醍醐味でしょう。
#+end_src

- なぜ多機能たりえるのか？

*** Org記法
:PROPERTIES:
:CREATED:  [2022-11-19 Sat 17:20]
:END:

今回はliterateの話を詳しくするので記法としてのOrgに触れてもいいかもしれない

** 文芸的執筆
:PROPERTIES:
:CREATED:  [2022-11-18 Fri 16:01]
:END:

文芸的執筆は言ってみれば「枠組み」
さまざまな執筆法をこの枠組みの中で実践できる
- [[https://rashita.net/blog/?p=31107][執筆はメモからはじめる | R-style]]
- [[https://dot.asahi.com/wa/2022091500019.html?page=1][朝日新聞記者の「文章術」 “先に見出しを考える”が吉？〈週刊朝日〉 | AERA dot. (アエラドット)]]
- 構文チェックなどさまざまな「自動化」

*** literate programming
:PROPERTIES:
:CREATED:  [2022-11-12 Sat 15:26]
:END:

#+begin_src text :eval no
  一方で、Org-modeはプログラムコードの作成にも貢献します。一般的にプログラムコードを書く場合、コードの中にコメントとして変数や関数または処理の説明を書いて読み手にプログラムの意図を伝えます。ところが、コメントとして書ける分量は限定的であり、表現力も乏しいことから、プログラムの説明をする手段として充分とは言いがたい面があります。

  この問題を解決する手段をOrg-modeは備えています。Org-modeではコードブロックという、コードを収めるための記述様式があり、これは文書中のどこにでも、何個でも配置することができます。このコードブロックの仕組みを使うと、コードの中にコメントとして説明を書くという従来の構造とは逆の、つまり、説明(ドキュメント)の中にコードを書くという構造をつくることができます。ここでのポイントは、ドキュメント内に分散的に配置されたコードの断片は、Org-modeの機能を使うことにより、結合されてドキュメントとは別の一つの実行可能ファイルとして出力できる点です。

  この仕組みを使うメリットはいくつかあります。まず、ドキュメントはOrg-modeの形式で書けるので、アウトラインの階層構造などを使って表現力豊かにに記述できます。そして、ドキュメント内の各説明とそれを実現するコードを対応するかたちで配置できるので、プログラムの読み手の理解を深めます。「文芸的プログラミング」と呼ばれるこの手法は、プログラム作成のパラダイムを変えうる試みであり、適用範囲も広いため、一部で注目を集めています。Org-modeは文芸的プログラミングを強力にサポートするプラットフォームです。
#+end_src
